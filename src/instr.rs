use std::fmt;
use std::io::Write;

use crate::cpu::{Cond, Reg16, Reg8};
use crate::peripherals::Addressable;

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq)]
pub enum Instr {
    ADC_r8_d8(Reg8, u8),
    ADC_r8_ir16(Reg8, Reg16),
    ADC_r8_r8(Reg8, Reg8),
    ADD_r16_r16(Reg16, Reg16),
    ADD_r16_r8(Reg16, i8),
    ADD_r8_d8(Reg8, u8),
    ADD_r8_ir16(Reg8, Reg16),
    ADD_r8_r8(Reg8, Reg8),
    AND_d8(u8),
    AND_ir16(Reg16),
    AND_r8(Reg8),
    CALL_COND_a16(Cond, u16),
    CALL_a16(u16),
    CCF,
    CPL,
    CP_d8(u8),
    CP_ir16(Reg16),
    CP_r8(Reg8),
    DAA,
    DEC_ir16(Reg16),
    DEC_r16(Reg16),
    DEC_r8(Reg8),
    DI,
    EI,
    HALT,
    INC_ir16(Reg16),
    INC_r16(Reg16),
    INC_r8(Reg8),
    INVALID(u16),
    JP_COND_a16(Cond, u16),
    JP_a16(u16),
    JP_r16(Reg16),
    JR_COND_r8(Cond, i8),
    JR_r8(i8),
    LDH_ia8_r8(u8, Reg8),
    LDH_r8_ia8(Reg8, u8),
    LD_ia16_r16(u16, Reg16),
    LD_ia16_r8(u16, Reg8),
    LD_ir16_d8(Reg16, u8),
    LD_ir16_r8(Reg16, Reg8),
    LD_iir16_r8(Reg16, Reg8),
    LD_dir16_r8(Reg16, Reg8),
    LD_ir8_r8(Reg8, Reg8),
    LD_r16_d16(Reg16, u16),
    LD_r16_r16(Reg16, Reg16),
    LD_r16_r16_r8(Reg16, Reg16, i8),
    LD_r8_d8(Reg8, u8),
    LD_r8_ia16(Reg8, u16),
    LD_r8_ir16(Reg8, Reg16),
    LD_r8_iir16(Reg8, Reg16),
    LD_r8_dir16(Reg8, Reg16),
    LD_r8_ir8(Reg8, Reg8),
    LD_r8_r8(Reg8, Reg8),
    NOP,
    OR_d8(u8),
    OR_ir16(Reg16),
    OR_r8(Reg8),
    POP_r16(Reg16),
    PUSH_r16(Reg16),
    RET,
    RETI,
    RET_COND(Cond),
    RLA,
    RLCA,
    RRA,
    RRCA,
    RST_LIT(u8),
    SBC_r8_d8(Reg8, u8),
    SBC_r8_ir16(Reg8, Reg16),
    SBC_r8_r8(Reg8, Reg8),
    SCF,
    STOP_0(u8),
    SUB_d8(u8),
    SUB_ir16(Reg16),
    SUB_r8(Reg8),
    XOR_d8(u8),
    XOR_ir16(Reg16),
    XOR_r8(Reg8),
    CBPrefix(PrefixInstr),
}

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq)]
pub enum PrefixInstr {
    BIT_l8_ir16(u8, Reg16),
    BIT_l8_r8(u8, Reg8),
    RES_l8_ir16(u8, Reg16),
    RES_l8_r8(u8, Reg8),
    RLC_ir16(Reg16),
    RLC_r8(Reg8),
    RL_ir16(Reg16),
    RL_r8(Reg8),
    RRC_ir16(Reg16),
    RRC_r8(Reg8),
    RR_ir16(Reg16),
    RR_r8(Reg8),
    SET_l8_ir16(u8, Reg16),
    SET_l8_r8(u8, Reg8),
    SLA_ir16(Reg16),
    SLA_r8(Reg8),
    SRA_ir16(Reg16),
    SRA_r8(Reg8),
    SRL_ir16(Reg16),
    SRL_r8(Reg8),
    SWAP_ir16(Reg16),
    SWAP_r8(Reg8),
}

impl PrefixInstr {
    fn disasm<R: Addressable>(bytes: &mut R, addr: u16) -> (u16, u8, PrefixInstr) {
        let opcode = bytes.read_byte(addr);
        let i = match opcode {
            0x00 => PrefixInstr::RLC_r8(Reg8::B),
            0x01 => PrefixInstr::RLC_r8(Reg8::C),
            0x02 => PrefixInstr::RLC_r8(Reg8::D),
            0x03 => PrefixInstr::RLC_r8(Reg8::E),
            0x04 => PrefixInstr::RLC_r8(Reg8::H),
            0x05 => PrefixInstr::RLC_r8(Reg8::L),
            0x06 => PrefixInstr::RLC_ir16(Reg16::HL),
            0x07 => PrefixInstr::RLC_r8(Reg8::A),
            0x08 => PrefixInstr::RRC_r8(Reg8::B),
            0x09 => PrefixInstr::RRC_r8(Reg8::C),
            0x0a => PrefixInstr::RRC_r8(Reg8::D),
            0x0b => PrefixInstr::RRC_r8(Reg8::E),
            0x0c => PrefixInstr::RRC_r8(Reg8::H),
            0x0d => PrefixInstr::RRC_r8(Reg8::L),
            0x0e => PrefixInstr::RRC_ir16(Reg16::HL),
            0x0f => PrefixInstr::RRC_r8(Reg8::A),
            0x10 => PrefixInstr::RL_r8(Reg8::B),
            0x11 => PrefixInstr::RL_r8(Reg8::C),
            0x12 => PrefixInstr::RL_r8(Reg8::D),
            0x13 => PrefixInstr::RL_r8(Reg8::E),
            0x14 => PrefixInstr::RL_r8(Reg8::H),
            0x15 => PrefixInstr::RL_r8(Reg8::L),
            0x16 => PrefixInstr::RL_ir16(Reg16::HL),
            0x17 => PrefixInstr::RL_r8(Reg8::A),
            0x18 => PrefixInstr::RR_r8(Reg8::B),
            0x19 => PrefixInstr::RR_r8(Reg8::C),
            0x1a => PrefixInstr::RR_r8(Reg8::D),
            0x1b => PrefixInstr::RR_r8(Reg8::E),
            0x1c => PrefixInstr::RR_r8(Reg8::H),
            0x1d => PrefixInstr::RR_r8(Reg8::L),
            0x1e => PrefixInstr::RR_ir16(Reg16::HL),
            0x1f => PrefixInstr::RR_r8(Reg8::A),
            0x20 => PrefixInstr::SLA_r8(Reg8::B),
            0x21 => PrefixInstr::SLA_r8(Reg8::C),
            0x22 => PrefixInstr::SLA_r8(Reg8::D),
            0x23 => PrefixInstr::SLA_r8(Reg8::E),
            0x24 => PrefixInstr::SLA_r8(Reg8::H),
            0x25 => PrefixInstr::SLA_r8(Reg8::L),
            0x26 => PrefixInstr::SLA_ir16(Reg16::HL),
            0x27 => PrefixInstr::SLA_r8(Reg8::A),
            0x28 => PrefixInstr::SRA_r8(Reg8::B),
            0x29 => PrefixInstr::SRA_r8(Reg8::C),
            0x2a => PrefixInstr::SRA_r8(Reg8::D),
            0x2b => PrefixInstr::SRA_r8(Reg8::E),
            0x2c => PrefixInstr::SRA_r8(Reg8::H),
            0x2d => PrefixInstr::SRA_r8(Reg8::L),
            0x2e => PrefixInstr::SRA_ir16(Reg16::HL),
            0x2f => PrefixInstr::SRA_r8(Reg8::A),
            0x30 => PrefixInstr::SWAP_r8(Reg8::B),
            0x31 => PrefixInstr::SWAP_r8(Reg8::C),
            0x32 => PrefixInstr::SWAP_r8(Reg8::D),
            0x33 => PrefixInstr::SWAP_r8(Reg8::E),
            0x34 => PrefixInstr::SWAP_r8(Reg8::H),
            0x35 => PrefixInstr::SWAP_r8(Reg8::L),
            0x36 => PrefixInstr::SWAP_ir16(Reg16::HL),
            0x37 => PrefixInstr::SWAP_r8(Reg8::A),
            0x38 => PrefixInstr::SRL_r8(Reg8::B),
            0x39 => PrefixInstr::SRL_r8(Reg8::C),
            0x3a => PrefixInstr::SRL_r8(Reg8::D),
            0x3b => PrefixInstr::SRL_r8(Reg8::E),
            0x3c => PrefixInstr::SRL_r8(Reg8::H),
            0x3d => PrefixInstr::SRL_r8(Reg8::L),
            0x3e => PrefixInstr::SRL_ir16(Reg16::HL),
            0x3f => PrefixInstr::SRL_r8(Reg8::A),
            0x40 => PrefixInstr::BIT_l8_r8(0, Reg8::B),
            0x41 => PrefixInstr::BIT_l8_r8(0, Reg8::C),
            0x42 => PrefixInstr::BIT_l8_r8(0, Reg8::D),
            0x43 => PrefixInstr::BIT_l8_r8(0, Reg8::E),
            0x44 => PrefixInstr::BIT_l8_r8(0, Reg8::H),
            0x45 => PrefixInstr::BIT_l8_r8(0, Reg8::L),
            0x46 => PrefixInstr::BIT_l8_ir16(0, Reg16::HL),
            0x47 => PrefixInstr::BIT_l8_r8(0, Reg8::A),
            0x48 => PrefixInstr::BIT_l8_r8(1, Reg8::B),
            0x49 => PrefixInstr::BIT_l8_r8(1, Reg8::C),
            0x4a => PrefixInstr::BIT_l8_r8(1, Reg8::D),
            0x4b => PrefixInstr::BIT_l8_r8(1, Reg8::E),
            0x4c => PrefixInstr::BIT_l8_r8(1, Reg8::H),
            0x4d => PrefixInstr::BIT_l8_r8(1, Reg8::L),
            0x4e => PrefixInstr::BIT_l8_ir16(1, Reg16::HL),
            0x4f => PrefixInstr::BIT_l8_r8(1, Reg8::A),
            0x50 => PrefixInstr::BIT_l8_r8(2, Reg8::B),
            0x51 => PrefixInstr::BIT_l8_r8(2, Reg8::C),
            0x52 => PrefixInstr::BIT_l8_r8(2, Reg8::D),
            0x53 => PrefixInstr::BIT_l8_r8(2, Reg8::E),
            0x54 => PrefixInstr::BIT_l8_r8(2, Reg8::H),
            0x55 => PrefixInstr::BIT_l8_r8(2, Reg8::L),
            0x56 => PrefixInstr::BIT_l8_ir16(2, Reg16::HL),
            0x57 => PrefixInstr::BIT_l8_r8(2, Reg8::A),
            0x58 => PrefixInstr::BIT_l8_r8(3, Reg8::B),
            0x59 => PrefixInstr::BIT_l8_r8(3, Reg8::C),
            0x5a => PrefixInstr::BIT_l8_r8(3, Reg8::D),
            0x5b => PrefixInstr::BIT_l8_r8(3, Reg8::E),
            0x5c => PrefixInstr::BIT_l8_r8(3, Reg8::H),
            0x5d => PrefixInstr::BIT_l8_r8(3, Reg8::L),
            0x5e => PrefixInstr::BIT_l8_ir16(3, Reg16::HL),
            0x5f => PrefixInstr::BIT_l8_r8(3, Reg8::A),
            0x60 => PrefixInstr::BIT_l8_r8(4, Reg8::B),
            0x61 => PrefixInstr::BIT_l8_r8(4, Reg8::C),
            0x62 => PrefixInstr::BIT_l8_r8(4, Reg8::D),
            0x63 => PrefixInstr::BIT_l8_r8(4, Reg8::E),
            0x64 => PrefixInstr::BIT_l8_r8(4, Reg8::H),
            0x65 => PrefixInstr::BIT_l8_r8(4, Reg8::L),
            0x66 => PrefixInstr::BIT_l8_ir16(4, Reg16::HL),
            0x67 => PrefixInstr::BIT_l8_r8(4, Reg8::A),
            0x68 => PrefixInstr::BIT_l8_r8(5, Reg8::B),
            0x69 => PrefixInstr::BIT_l8_r8(5, Reg8::C),
            0x6a => PrefixInstr::BIT_l8_r8(5, Reg8::D),
            0x6b => PrefixInstr::BIT_l8_r8(5, Reg8::E),
            0x6c => PrefixInstr::BIT_l8_r8(5, Reg8::H),
            0x6d => PrefixInstr::BIT_l8_r8(5, Reg8::L),
            0x6e => PrefixInstr::BIT_l8_ir16(5, Reg16::HL),
            0x6f => PrefixInstr::BIT_l8_r8(5, Reg8::A),
            0x70 => PrefixInstr::BIT_l8_r8(6, Reg8::B),
            0x71 => PrefixInstr::BIT_l8_r8(6, Reg8::C),
            0x72 => PrefixInstr::BIT_l8_r8(6, Reg8::D),
            0x73 => PrefixInstr::BIT_l8_r8(6, Reg8::E),
            0x74 => PrefixInstr::BIT_l8_r8(6, Reg8::H),
            0x75 => PrefixInstr::BIT_l8_r8(6, Reg8::L),
            0x76 => PrefixInstr::BIT_l8_ir16(6, Reg16::HL),
            0x77 => PrefixInstr::BIT_l8_r8(6, Reg8::A),
            0x78 => PrefixInstr::BIT_l8_r8(7, Reg8::B),
            0x79 => PrefixInstr::BIT_l8_r8(7, Reg8::C),
            0x7a => PrefixInstr::BIT_l8_r8(7, Reg8::D),
            0x7b => PrefixInstr::BIT_l8_r8(7, Reg8::E),
            0x7c => PrefixInstr::BIT_l8_r8(7, Reg8::H),
            0x7d => PrefixInstr::BIT_l8_r8(7, Reg8::L),
            0x7e => PrefixInstr::BIT_l8_ir16(7, Reg16::HL),
            0x7f => PrefixInstr::BIT_l8_r8(7, Reg8::A),
            0x80 => PrefixInstr::RES_l8_r8(0, Reg8::B),
            0x81 => PrefixInstr::RES_l8_r8(0, Reg8::C),
            0x82 => PrefixInstr::RES_l8_r8(0, Reg8::D),
            0x83 => PrefixInstr::RES_l8_r8(0, Reg8::E),
            0x84 => PrefixInstr::RES_l8_r8(0, Reg8::H),
            0x85 => PrefixInstr::RES_l8_r8(0, Reg8::L),
            0x86 => PrefixInstr::RES_l8_ir16(0, Reg16::HL),
            0x87 => PrefixInstr::RES_l8_r8(0, Reg8::A),
            0x88 => PrefixInstr::RES_l8_r8(1, Reg8::B),
            0x89 => PrefixInstr::RES_l8_r8(1, Reg8::C),
            0x8a => PrefixInstr::RES_l8_r8(1, Reg8::D),
            0x8b => PrefixInstr::RES_l8_r8(1, Reg8::E),
            0x8c => PrefixInstr::RES_l8_r8(1, Reg8::H),
            0x8d => PrefixInstr::RES_l8_r8(1, Reg8::L),
            0x8e => PrefixInstr::RES_l8_ir16(1, Reg16::HL),
            0x8f => PrefixInstr::RES_l8_r8(1, Reg8::A),
            0x90 => PrefixInstr::RES_l8_r8(2, Reg8::B),
            0x91 => PrefixInstr::RES_l8_r8(2, Reg8::C),
            0x92 => PrefixInstr::RES_l8_r8(2, Reg8::D),
            0x93 => PrefixInstr::RES_l8_r8(2, Reg8::E),
            0x94 => PrefixInstr::RES_l8_r8(2, Reg8::H),
            0x95 => PrefixInstr::RES_l8_r8(2, Reg8::L),
            0x96 => PrefixInstr::RES_l8_ir16(2, Reg16::HL),
            0x97 => PrefixInstr::RES_l8_r8(2, Reg8::A),
            0x98 => PrefixInstr::RES_l8_r8(3, Reg8::B),
            0x99 => PrefixInstr::RES_l8_r8(3, Reg8::C),
            0x9a => PrefixInstr::RES_l8_r8(3, Reg8::D),
            0x9b => PrefixInstr::RES_l8_r8(3, Reg8::E),
            0x9c => PrefixInstr::RES_l8_r8(3, Reg8::H),
            0x9d => PrefixInstr::RES_l8_r8(3, Reg8::L),
            0x9e => PrefixInstr::RES_l8_ir16(3, Reg16::HL),
            0x9f => PrefixInstr::RES_l8_r8(3, Reg8::A),
            0xa0 => PrefixInstr::RES_l8_r8(4, Reg8::B),
            0xa1 => PrefixInstr::RES_l8_r8(4, Reg8::C),
            0xa2 => PrefixInstr::RES_l8_r8(4, Reg8::D),
            0xa3 => PrefixInstr::RES_l8_r8(4, Reg8::E),
            0xa4 => PrefixInstr::RES_l8_r8(4, Reg8::H),
            0xa5 => PrefixInstr::RES_l8_r8(4, Reg8::L),
            0xa6 => PrefixInstr::RES_l8_ir16(4, Reg16::HL),
            0xa7 => PrefixInstr::RES_l8_r8(4, Reg8::A),
            0xa8 => PrefixInstr::RES_l8_r8(5, Reg8::B),
            0xa9 => PrefixInstr::RES_l8_r8(5, Reg8::C),
            0xaa => PrefixInstr::RES_l8_r8(5, Reg8::D),
            0xab => PrefixInstr::RES_l8_r8(5, Reg8::E),
            0xac => PrefixInstr::RES_l8_r8(5, Reg8::H),
            0xad => PrefixInstr::RES_l8_r8(5, Reg8::L),
            0xae => PrefixInstr::RES_l8_ir16(5, Reg16::HL),
            0xaf => PrefixInstr::RES_l8_r8(5, Reg8::A),
            0xb0 => PrefixInstr::RES_l8_r8(6, Reg8::B),
            0xb1 => PrefixInstr::RES_l8_r8(6, Reg8::C),
            0xb2 => PrefixInstr::RES_l8_r8(6, Reg8::D),
            0xb3 => PrefixInstr::RES_l8_r8(6, Reg8::E),
            0xb4 => PrefixInstr::RES_l8_r8(6, Reg8::H),
            0xb5 => PrefixInstr::RES_l8_r8(6, Reg8::L),
            0xb6 => PrefixInstr::RES_l8_ir16(6, Reg16::HL),
            0xb7 => PrefixInstr::RES_l8_r8(6, Reg8::A),
            0xb8 => PrefixInstr::RES_l8_r8(7, Reg8::B),
            0xb9 => PrefixInstr::RES_l8_r8(7, Reg8::C),
            0xba => PrefixInstr::RES_l8_r8(7, Reg8::D),
            0xbb => PrefixInstr::RES_l8_r8(7, Reg8::E),
            0xbc => PrefixInstr::RES_l8_r8(7, Reg8::H),
            0xbd => PrefixInstr::RES_l8_r8(7, Reg8::L),
            0xbe => PrefixInstr::RES_l8_ir16(7, Reg16::HL),
            0xbf => PrefixInstr::RES_l8_r8(7, Reg8::A),
            0xc0 => PrefixInstr::SET_l8_r8(0, Reg8::B),
            0xc1 => PrefixInstr::SET_l8_r8(0, Reg8::C),
            0xc2 => PrefixInstr::SET_l8_r8(0, Reg8::D),
            0xc3 => PrefixInstr::SET_l8_r8(0, Reg8::E),
            0xc4 => PrefixInstr::SET_l8_r8(0, Reg8::H),
            0xc5 => PrefixInstr::SET_l8_r8(0, Reg8::L),
            0xc6 => PrefixInstr::SET_l8_ir16(0, Reg16::HL),
            0xc7 => PrefixInstr::SET_l8_r8(0, Reg8::A),
            0xc8 => PrefixInstr::SET_l8_r8(1, Reg8::B),
            0xc9 => PrefixInstr::SET_l8_r8(1, Reg8::C),
            0xca => PrefixInstr::SET_l8_r8(1, Reg8::D),
            0xcb => PrefixInstr::SET_l8_r8(1, Reg8::E),
            0xcc => PrefixInstr::SET_l8_r8(1, Reg8::H),
            0xcd => PrefixInstr::SET_l8_r8(1, Reg8::L),
            0xce => PrefixInstr::SET_l8_ir16(1, Reg16::HL),
            0xcf => PrefixInstr::SET_l8_r8(1, Reg8::A),
            0xd0 => PrefixInstr::SET_l8_r8(2, Reg8::B),
            0xd1 => PrefixInstr::SET_l8_r8(2, Reg8::C),
            0xd2 => PrefixInstr::SET_l8_r8(2, Reg8::D),
            0xd3 => PrefixInstr::SET_l8_r8(2, Reg8::E),
            0xd4 => PrefixInstr::SET_l8_r8(2, Reg8::H),
            0xd5 => PrefixInstr::SET_l8_r8(2, Reg8::L),
            0xd6 => PrefixInstr::SET_l8_ir16(2, Reg16::HL),
            0xd7 => PrefixInstr::SET_l8_r8(2, Reg8::A),
            0xd8 => PrefixInstr::SET_l8_r8(3, Reg8::B),
            0xd9 => PrefixInstr::SET_l8_r8(3, Reg8::C),
            0xda => PrefixInstr::SET_l8_r8(3, Reg8::D),
            0xdb => PrefixInstr::SET_l8_r8(3, Reg8::E),
            0xdc => PrefixInstr::SET_l8_r8(3, Reg8::H),
            0xdd => PrefixInstr::SET_l8_r8(3, Reg8::L),
            0xde => PrefixInstr::SET_l8_ir16(3, Reg16::HL),
            0xdf => PrefixInstr::SET_l8_r8(3, Reg8::A),
            0xe0 => PrefixInstr::SET_l8_r8(4, Reg8::B),
            0xe1 => PrefixInstr::SET_l8_r8(4, Reg8::C),
            0xe2 => PrefixInstr::SET_l8_r8(4, Reg8::D),
            0xe3 => PrefixInstr::SET_l8_r8(4, Reg8::E),
            0xe4 => PrefixInstr::SET_l8_r8(4, Reg8::H),
            0xe5 => PrefixInstr::SET_l8_r8(4, Reg8::L),
            0xe6 => PrefixInstr::SET_l8_ir16(4, Reg16::HL),
            0xe7 => PrefixInstr::SET_l8_r8(4, Reg8::A),
            0xe8 => PrefixInstr::SET_l8_r8(5, Reg8::B),
            0xe9 => PrefixInstr::SET_l8_r8(5, Reg8::C),
            0xea => PrefixInstr::SET_l8_r8(5, Reg8::D),
            0xeb => PrefixInstr::SET_l8_r8(5, Reg8::E),
            0xec => PrefixInstr::SET_l8_r8(5, Reg8::H),
            0xed => PrefixInstr::SET_l8_r8(5, Reg8::L),
            0xee => PrefixInstr::SET_l8_ir16(5, Reg16::HL),
            0xef => PrefixInstr::SET_l8_r8(5, Reg8::A),
            0xf0 => PrefixInstr::SET_l8_r8(6, Reg8::B),
            0xf1 => PrefixInstr::SET_l8_r8(6, Reg8::C),
            0xf2 => PrefixInstr::SET_l8_r8(6, Reg8::D),
            0xf3 => PrefixInstr::SET_l8_r8(6, Reg8::E),
            0xf4 => PrefixInstr::SET_l8_r8(6, Reg8::H),
            0xf5 => PrefixInstr::SET_l8_r8(6, Reg8::L),
            0xf6 => PrefixInstr::SET_l8_ir16(6, Reg16::HL),
            0xf7 => PrefixInstr::SET_l8_r8(6, Reg8::A),
            0xf8 => PrefixInstr::SET_l8_r8(7, Reg8::B),
            0xf9 => PrefixInstr::SET_l8_r8(7, Reg8::C),
            0xfa => PrefixInstr::SET_l8_r8(7, Reg8::D),
            0xfb => PrefixInstr::SET_l8_r8(7, Reg8::E),
            0xfc => PrefixInstr::SET_l8_r8(7, Reg8::H),
            0xfd => PrefixInstr::SET_l8_r8(7, Reg8::L),
            0xfe => PrefixInstr::SET_l8_ir16(7, Reg16::HL),
            0xff => PrefixInstr::SET_l8_r8(7, Reg8::A),
        };
        (addr.wrapping_add(1), opcode, i)
    }
}

fn read_u16<R: Addressable>(bytes: &mut R, next_addr: &mut u16, addr: u16) -> u16 {
    *next_addr = addr.wrapping_add(2);
    u16::from_le_bytes([bytes.read_byte(addr), bytes.read_byte(addr + 1)])
}

fn read_u8<R: Addressable>(bytes: &mut R, next_addr: &mut u16, addr: u16) -> u8 {
    *next_addr = addr.wrapping_add(1);
    bytes.read_byte(addr)
}

impl Instr {
    pub fn disasm<R: Addressable>(bytes: &mut R, addr: u16) -> (u16, u8, Instr) {
        let mut cbprefix = 0;
        let mut next_addr = addr + 1;
        let opcode = read_u8(bytes, &mut next_addr, addr);
        let i = match opcode {
            0x00 => Instr::NOP,
            0x01 => Instr::LD_r16_d16(Reg16::BC, read_u16(bytes, &mut next_addr, addr + 1)),
            0x02 => Instr::LD_ir16_r8(Reg16::BC, Reg8::A),
            0x03 => Instr::INC_r16(Reg16::BC),
            0x04 => Instr::INC_r8(Reg8::B),
            0x05 => Instr::DEC_r8(Reg8::B),
            0x06 => Instr::LD_r8_d8(Reg8::B, read_u8(bytes, &mut next_addr, addr + 1)),
            0x07 => Instr::RLCA,
            0x08 => Instr::LD_ia16_r16(read_u16(bytes, &mut next_addr, addr + 1), Reg16::SP),
            0x09 => Instr::ADD_r16_r16(Reg16::HL, Reg16::BC),
            0x0a => Instr::LD_r8_ir16(Reg8::A, Reg16::BC),
            0x0b => Instr::DEC_r16(Reg16::BC),
            0x0c => Instr::INC_r8(Reg8::C),
            0x0d => Instr::DEC_r8(Reg8::C),
            0x0e => Instr::LD_r8_d8(Reg8::C, read_u8(bytes, &mut next_addr, addr + 1)),
            0x0f => Instr::RRCA,
            0x10 => Instr::STOP_0(0),
            0x11 => Instr::LD_r16_d16(Reg16::DE, read_u16(bytes, &mut next_addr, addr + 1)),
            0x12 => Instr::LD_ir16_r8(Reg16::DE, Reg8::A),
            0x13 => Instr::INC_r16(Reg16::DE),
            0x14 => Instr::INC_r8(Reg8::D),
            0x15 => Instr::DEC_r8(Reg8::D),
            0x16 => Instr::LD_r8_d8(Reg8::D, read_u8(bytes, &mut next_addr, addr + 1)),
            0x17 => Instr::RLA,
            0x18 => Instr::JR_r8(read_u8(bytes, &mut next_addr, addr + 1) as i8),
            0x19 => Instr::ADD_r16_r16(Reg16::HL, Reg16::DE),
            0x1a => Instr::LD_r8_ir16(Reg8::A, Reg16::DE),
            0x1b => Instr::DEC_r16(Reg16::DE),
            0x1c => Instr::INC_r8(Reg8::E),
            0x1d => Instr::DEC_r8(Reg8::E),
            0x1e => Instr::LD_r8_d8(Reg8::E, read_u8(bytes, &mut next_addr, addr + 1)),
            0x1f => Instr::RRA,
            0x20 => Instr::JR_COND_r8(Cond::NZ, read_u8(bytes, &mut next_addr, addr + 1) as i8),
            0x21 => Instr::LD_r16_d16(Reg16::HL, read_u16(bytes, &mut next_addr, addr + 1)),
            0x22 => Instr::LD_iir16_r8(Reg16::HL, Reg8::A),
            0x23 => Instr::INC_r16(Reg16::HL),
            0x24 => Instr::INC_r8(Reg8::H),
            0x25 => Instr::DEC_r8(Reg8::H),
            0x26 => Instr::LD_r8_d8(Reg8::H, read_u8(bytes, &mut next_addr, addr + 1)),
            0x27 => Instr::DAA,
            0x28 => Instr::JR_COND_r8(Cond::Z, read_u8(bytes, &mut next_addr, addr + 1) as i8),
            0x29 => Instr::ADD_r16_r16(Reg16::HL, Reg16::HL),
            0x2a => Instr::LD_r8_iir16(Reg8::A, Reg16::HL),
            0x2b => Instr::DEC_r16(Reg16::HL),
            0x2c => Instr::INC_r8(Reg8::L),
            0x2d => Instr::DEC_r8(Reg8::L),
            0x2e => Instr::LD_r8_d8(Reg8::L, read_u8(bytes, &mut next_addr, addr + 1)),
            0x2f => Instr::CPL,
            0x30 => Instr::JR_COND_r8(Cond::NC, read_u8(bytes, &mut next_addr, addr + 1) as i8),
            0x31 => Instr::LD_r16_d16(Reg16::SP, read_u16(bytes, &mut next_addr, addr + 1)),
            0x32 => Instr::LD_dir16_r8(Reg16::HL, Reg8::A),
            0x33 => Instr::INC_r16(Reg16::SP),
            0x34 => Instr::INC_ir16(Reg16::HL),
            0x35 => Instr::DEC_ir16(Reg16::HL),
            0x36 => Instr::LD_ir16_d8(Reg16::HL, read_u8(bytes, &mut next_addr, addr + 1)),
            0x37 => Instr::SCF,
            0x38 => Instr::JR_COND_r8(Cond::C, read_u8(bytes, &mut next_addr, addr + 1) as i8),
            0x39 => Instr::ADD_r16_r16(Reg16::HL, Reg16::SP),
            0x3a => Instr::LD_r8_dir16(Reg8::A, Reg16::HL),
            0x3b => Instr::DEC_r16(Reg16::SP),
            0x3c => Instr::INC_r8(Reg8::A),
            0x3d => Instr::DEC_r8(Reg8::A),
            0x3e => Instr::LD_r8_d8(Reg8::A, read_u8(bytes, &mut next_addr, addr + 1)),
            0x3f => Instr::CCF,
            0x40 => Instr::LD_r8_r8(Reg8::B, Reg8::B),
            0x41 => Instr::LD_r8_r8(Reg8::B, Reg8::C),
            0x42 => Instr::LD_r8_r8(Reg8::B, Reg8::D),
            0x43 => Instr::LD_r8_r8(Reg8::B, Reg8::E),
            0x44 => Instr::LD_r8_r8(Reg8::B, Reg8::H),
            0x45 => Instr::LD_r8_r8(Reg8::B, Reg8::L),
            0x46 => Instr::LD_r8_ir16(Reg8::B, Reg16::HL),
            0x47 => Instr::LD_r8_r8(Reg8::B, Reg8::A),
            0x48 => Instr::LD_r8_r8(Reg8::C, Reg8::B),
            0x49 => Instr::LD_r8_r8(Reg8::C, Reg8::C),
            0x4a => Instr::LD_r8_r8(Reg8::C, Reg8::D),
            0x4b => Instr::LD_r8_r8(Reg8::C, Reg8::E),
            0x4c => Instr::LD_r8_r8(Reg8::C, Reg8::H),
            0x4d => Instr::LD_r8_r8(Reg8::C, Reg8::L),
            0x4e => Instr::LD_r8_ir16(Reg8::C, Reg16::HL),
            0x4f => Instr::LD_r8_r8(Reg8::C, Reg8::A),
            0x50 => Instr::LD_r8_r8(Reg8::D, Reg8::B),
            0x51 => Instr::LD_r8_r8(Reg8::D, Reg8::C),
            0x52 => Instr::LD_r8_r8(Reg8::D, Reg8::D),
            0x53 => Instr::LD_r8_r8(Reg8::D, Reg8::E),
            0x54 => Instr::LD_r8_r8(Reg8::D, Reg8::H),
            0x55 => Instr::LD_r8_r8(Reg8::D, Reg8::L),
            0x56 => Instr::LD_r8_ir16(Reg8::D, Reg16::HL),
            0x57 => Instr::LD_r8_r8(Reg8::D, Reg8::A),
            0x58 => Instr::LD_r8_r8(Reg8::E, Reg8::B),
            0x59 => Instr::LD_r8_r8(Reg8::E, Reg8::C),
            0x5a => Instr::LD_r8_r8(Reg8::E, Reg8::D),
            0x5b => Instr::LD_r8_r8(Reg8::E, Reg8::E),
            0x5c => Instr::LD_r8_r8(Reg8::E, Reg8::H),
            0x5d => Instr::LD_r8_r8(Reg8::E, Reg8::L),
            0x5e => Instr::LD_r8_ir16(Reg8::E, Reg16::HL),
            0x5f => Instr::LD_r8_r8(Reg8::E, Reg8::A),
            0x60 => Instr::LD_r8_r8(Reg8::H, Reg8::B),
            0x61 => Instr::LD_r8_r8(Reg8::H, Reg8::C),
            0x62 => Instr::LD_r8_r8(Reg8::H, Reg8::D),
            0x63 => Instr::LD_r8_r8(Reg8::H, Reg8::E),
            0x64 => Instr::LD_r8_r8(Reg8::H, Reg8::H),
            0x65 => Instr::LD_r8_r8(Reg8::H, Reg8::L),
            0x66 => Instr::LD_r8_ir16(Reg8::H, Reg16::HL),
            0x67 => Instr::LD_r8_r8(Reg8::H, Reg8::A),
            0x68 => Instr::LD_r8_r8(Reg8::L, Reg8::B),
            0x69 => Instr::LD_r8_r8(Reg8::L, Reg8::C),
            0x6a => Instr::LD_r8_r8(Reg8::L, Reg8::D),
            0x6b => Instr::LD_r8_r8(Reg8::L, Reg8::E),
            0x6c => Instr::LD_r8_r8(Reg8::L, Reg8::H),
            0x6d => Instr::LD_r8_r8(Reg8::L, Reg8::L),
            0x6e => Instr::LD_r8_ir16(Reg8::L, Reg16::HL),
            0x6f => Instr::LD_r8_r8(Reg8::L, Reg8::A),
            0x70 => Instr::LD_ir16_r8(Reg16::HL, Reg8::B),
            0x71 => Instr::LD_ir16_r8(Reg16::HL, Reg8::C),
            0x72 => Instr::LD_ir16_r8(Reg16::HL, Reg8::D),
            0x73 => Instr::LD_ir16_r8(Reg16::HL, Reg8::E),
            0x74 => Instr::LD_ir16_r8(Reg16::HL, Reg8::H),
            0x75 => Instr::LD_ir16_r8(Reg16::HL, Reg8::L),
            0x76 => Instr::HALT,
            0x77 => Instr::LD_ir16_r8(Reg16::HL, Reg8::A),
            0x78 => Instr::LD_r8_r8(Reg8::A, Reg8::B),
            0x79 => Instr::LD_r8_r8(Reg8::A, Reg8::C),
            0x7a => Instr::LD_r8_r8(Reg8::A, Reg8::D),
            0x7b => Instr::LD_r8_r8(Reg8::A, Reg8::E),
            0x7c => Instr::LD_r8_r8(Reg8::A, Reg8::H),
            0x7d => Instr::LD_r8_r8(Reg8::A, Reg8::L),
            0x7e => Instr::LD_r8_ir16(Reg8::A, Reg16::HL),
            0x7f => Instr::LD_r8_r8(Reg8::A, Reg8::A),
            0x80 => Instr::ADD_r8_r8(Reg8::A, Reg8::B),
            0x81 => Instr::ADD_r8_r8(Reg8::A, Reg8::C),
            0x82 => Instr::ADD_r8_r8(Reg8::A, Reg8::D),
            0x83 => Instr::ADD_r8_r8(Reg8::A, Reg8::E),
            0x84 => Instr::ADD_r8_r8(Reg8::A, Reg8::H),
            0x85 => Instr::ADD_r8_r8(Reg8::A, Reg8::L),
            0x86 => Instr::ADD_r8_ir16(Reg8::A, Reg16::HL),
            0x87 => Instr::ADD_r8_r8(Reg8::A, Reg8::A),
            0x88 => Instr::ADC_r8_r8(Reg8::A, Reg8::B),
            0x89 => Instr::ADC_r8_r8(Reg8::A, Reg8::C),
            0x8a => Instr::ADC_r8_r8(Reg8::A, Reg8::D),
            0x8b => Instr::ADC_r8_r8(Reg8::A, Reg8::E),
            0x8c => Instr::ADC_r8_r8(Reg8::A, Reg8::H),
            0x8d => Instr::ADC_r8_r8(Reg8::A, Reg8::L),
            0x8e => Instr::ADC_r8_ir16(Reg8::A, Reg16::HL),
            0x8f => Instr::ADC_r8_r8(Reg8::A, Reg8::A),
            0x90 => Instr::SUB_r8(Reg8::B),
            0x91 => Instr::SUB_r8(Reg8::C),
            0x92 => Instr::SUB_r8(Reg8::D),
            0x93 => Instr::SUB_r8(Reg8::E),
            0x94 => Instr::SUB_r8(Reg8::H),
            0x95 => Instr::SUB_r8(Reg8::L),
            0x96 => Instr::SUB_ir16(Reg16::HL),
            0x97 => Instr::SUB_r8(Reg8::A),
            0x98 => Instr::SBC_r8_r8(Reg8::A, Reg8::B),
            0x99 => Instr::SBC_r8_r8(Reg8::A, Reg8::C),
            0x9a => Instr::SBC_r8_r8(Reg8::A, Reg8::D),
            0x9b => Instr::SBC_r8_r8(Reg8::A, Reg8::E),
            0x9c => Instr::SBC_r8_r8(Reg8::A, Reg8::H),
            0x9d => Instr::SBC_r8_r8(Reg8::A, Reg8::L),
            0x9e => Instr::SBC_r8_ir16(Reg8::A, Reg16::HL),
            0x9f => Instr::SBC_r8_r8(Reg8::A, Reg8::A),
            0xa0 => Instr::AND_r8(Reg8::B),
            0xa1 => Instr::AND_r8(Reg8::C),
            0xa2 => Instr::AND_r8(Reg8::D),
            0xa3 => Instr::AND_r8(Reg8::E),
            0xa4 => Instr::AND_r8(Reg8::H),
            0xa5 => Instr::AND_r8(Reg8::L),
            0xa6 => Instr::AND_ir16(Reg16::HL),
            0xa7 => Instr::AND_r8(Reg8::A),
            0xa8 => Instr::XOR_r8(Reg8::B),
            0xa9 => Instr::XOR_r8(Reg8::C),
            0xaa => Instr::XOR_r8(Reg8::D),
            0xab => Instr::XOR_r8(Reg8::E),
            0xac => Instr::XOR_r8(Reg8::H),
            0xad => Instr::XOR_r8(Reg8::L),
            0xae => Instr::XOR_ir16(Reg16::HL),
            0xaf => Instr::XOR_r8(Reg8::A),
            0xb0 => Instr::OR_r8(Reg8::B),
            0xb1 => Instr::OR_r8(Reg8::C),
            0xb2 => Instr::OR_r8(Reg8::D),
            0xb3 => Instr::OR_r8(Reg8::E),
            0xb4 => Instr::OR_r8(Reg8::H),
            0xb5 => Instr::OR_r8(Reg8::L),
            0xb6 => Instr::OR_ir16(Reg16::HL),
            0xb7 => Instr::OR_r8(Reg8::A),
            0xb8 => Instr::CP_r8(Reg8::B),
            0xb9 => Instr::CP_r8(Reg8::C),
            0xba => Instr::CP_r8(Reg8::D),
            0xbb => Instr::CP_r8(Reg8::E),
            0xbc => Instr::CP_r8(Reg8::H),
            0xbd => Instr::CP_r8(Reg8::L),
            0xbe => Instr::CP_ir16(Reg16::HL),
            0xbf => Instr::CP_r8(Reg8::A),
            0xc0 => Instr::RET_COND(Cond::NZ),
            0xc1 => Instr::POP_r16(Reg16::BC),
            0xc2 => Instr::JP_COND_a16(Cond::NZ, read_u16(bytes, &mut next_addr, addr + 1)),
            0xc3 => Instr::JP_a16(read_u16(bytes, &mut next_addr, addr + 1)),
            0xc4 => Instr::CALL_COND_a16(Cond::NZ, read_u16(bytes, &mut next_addr, addr + 1)),
            0xc5 => Instr::PUSH_r16(Reg16::BC),
            0xc6 => Instr::ADD_r8_d8(Reg8::A, read_u8(bytes, &mut next_addr, addr + 1)),
            0xc7 => Instr::RST_LIT(0x00),
            0xc8 => Instr::RET_COND(Cond::Z),
            0xc9 => Instr::RET,
            0xca => Instr::JP_COND_a16(Cond::Z, read_u16(bytes, &mut next_addr, addr + 1)),
            0xcb => {
                let (cb_next_addr, op, prefixed) = PrefixInstr::disasm(bytes, addr + 1);
                next_addr = cb_next_addr;
                cbprefix = op;
                Instr::CBPrefix(prefixed)
            }
            0xcc => Instr::CALL_COND_a16(Cond::Z, read_u16(bytes, &mut next_addr, addr + 1)),
            0xcd => Instr::CALL_a16(read_u16(bytes, &mut next_addr, addr + 1)),
            0xce => Instr::ADC_r8_d8(Reg8::A, read_u8(bytes, &mut next_addr, addr + 1)),
            0xcf => Instr::RST_LIT(0x08),
            0xd0 => Instr::RET_COND(Cond::NC),
            0xd1 => Instr::POP_r16(Reg16::DE),
            0xd2 => Instr::JP_COND_a16(Cond::NC, read_u16(bytes, &mut next_addr, addr + 1)),
            //0xd3 => Instr::INVALID,
            0xd4 => Instr::CALL_COND_a16(Cond::NC, read_u16(bytes, &mut next_addr, addr + 1)),
            0xd5 => Instr::PUSH_r16(Reg16::DE),
            0xd6 => Instr::SUB_d8(read_u8(bytes, &mut next_addr, addr + 1)),
            0xd7 => Instr::RST_LIT(0x10),
            0xd8 => Instr::RET_COND(Cond::C),
            0xd9 => Instr::RETI,
            0xda => Instr::JP_COND_a16(Cond::C, read_u16(bytes, &mut next_addr, addr + 1)),
            //0xdb => Instr::INVALID,
            0xdc => Instr::CALL_COND_a16(Cond::C, read_u16(bytes, &mut next_addr, addr + 1)),
            //0xdd => Instr::INVALID,
            0xde => Instr::SBC_r8_d8(Reg8::A, read_u8(bytes, &mut next_addr, addr + 1)),
            0xdf => Instr::RST_LIT(0x18),
            0xe0 => Instr::LDH_ia8_r8(read_u8(bytes, &mut next_addr, addr + 1), Reg8::A),
            0xe1 => Instr::POP_r16(Reg16::HL),
            0xe2 => Instr::LD_ir8_r8(Reg8::C, Reg8::A),
            //0xe3 => Instr::INVALID,
            //0xe4 => Instr::INVALID,
            0xe5 => Instr::PUSH_r16(Reg16::HL),
            0xe6 => Instr::AND_d8(read_u8(bytes, &mut next_addr, addr + 1)),
            0xe7 => Instr::RST_LIT(0x20),
            0xe8 => Instr::ADD_r16_r8(Reg16::SP, read_u8(bytes, &mut next_addr, addr + 1) as i8),
            0xe9 => Instr::JP_r16(Reg16::HL),
            0xea => Instr::LD_ia16_r8(read_u16(bytes, &mut next_addr, addr + 1), Reg8::A),
            // 0xeb => Instr::INVALID,
            // 0xec => Instr::INVALID,
            // 0xed => Instr::INVALID,
            0xee => Instr::XOR_d8(read_u8(bytes, &mut next_addr, addr + 1)),
            0xef => Instr::RST_LIT(0x28),
            0xf0 => Instr::LDH_r8_ia8(Reg8::A, read_u8(bytes, &mut next_addr, addr + 1)),
            0xf1 => Instr::POP_r16(Reg16::AF),
            0xf2 => Instr::LD_r8_ir8(Reg8::A, Reg8::C),
            0xf3 => Instr::DI,
            //0xf4 => Instr::INVALID,
            0xf5 => Instr::PUSH_r16(Reg16::AF),
            0xf6 => Instr::OR_d8(read_u8(bytes, &mut next_addr, addr + 1)),
            0xf7 => Instr::RST_LIT(0x30),
            0xf8 => Instr::LD_r16_r16_r8(
                Reg16::HL,
                Reg16::SP,
                read_u8(bytes, &mut next_addr, addr + 1) as i8,
            ),
            0xf9 => Instr::LD_r16_r16(Reg16::SP, Reg16::HL),
            0xfa => Instr::LD_r8_ia16(Reg8::A, read_u16(bytes, &mut next_addr, addr + 1)),
            0xfb => Instr::EI,
            //0xfc => Instr::INVALID,
            //0xfd => Instr::INVALID,
            0xfe => Instr::CP_d8(read_u8(bytes, &mut next_addr, addr + 1)),
            0xff => Instr::RST_LIT(0x38),
            i => Instr::INVALID(u16::from(i)),
        };

        if let Instr::CBPrefix(_) = i {
            (next_addr, cbprefix, i)
        } else {
            (next_addr, opcode, i)
        }
    }
}
impl fmt::Display for PrefixInstr {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            PrefixInstr::BIT_l8_ir16(x0, x1) => write!(f, "BIT {:x?},({:x?})", x0, x1),
            PrefixInstr::BIT_l8_r8(x0, x1) => write!(f, "BIT {:x?},{:x?}", x0, x1),
            PrefixInstr::RES_l8_ir16(x0, x1) => write!(f, "RES {:x?},({:x?})", x0, x1),
            PrefixInstr::RES_l8_r8(x0, x1) => write!(f, "RES {:x?},{:x?}", x0, x1),
            PrefixInstr::RLC_ir16(x0) => write!(f, "RLC ({:x?})", x0),
            PrefixInstr::RLC_r8(x0) => write!(f, "RLC {:x?}", x0),
            PrefixInstr::RL_ir16(x0) => write!(f, "RL ({:x?})", x0),
            PrefixInstr::RL_r8(x0) => write!(f, "RL {:x?}", x0),
            PrefixInstr::RRC_ir16(x0) => write!(f, "RRC ({:x?})", x0),
            PrefixInstr::RRC_r8(x0) => write!(f, "RRC {:x?}", x0),
            PrefixInstr::RR_ir16(x0) => write!(f, "RR ({:x?})", x0),
            PrefixInstr::RR_r8(x0) => write!(f, "RR {:x?}", x0),
            PrefixInstr::SLA_ir16(x0) => write!(f, "SLA ({:x?})", x0),
            PrefixInstr::SLA_r8(x0) => write!(f, "SLA {:x?}", x0),
            PrefixInstr::SRA_ir16(x0) => write!(f, "SRA ({:x?})", x0),
            PrefixInstr::SRA_r8(x0) => write!(f, "SRA {:x?}", x0),
            PrefixInstr::SRL_ir16(x0) => write!(f, "SRL ({:x?})", x0),
            PrefixInstr::SRL_r8(x0) => write!(f, "SRL {:x?}", x0),
            PrefixInstr::SET_l8_ir16(x0, x1) => write!(f, "SET {:x?},({:x?})", x0, x1),
            PrefixInstr::SET_l8_r8(x0, x1) => write!(f, "SET {:x?},{:x?}", x0, x1),
            PrefixInstr::SWAP_ir16(x0) => write!(f, "SWAP ({:x?})", x0),
            PrefixInstr::SWAP_r8(x0) => write!(f, "SWAP {:x?}", x0),
        }
    }
}

impl fmt::Display for Instr {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Instr::ADC_r8_d8(x0, x1) => write!(f, "ADC {:x?},{:x?}", x0, x1),
            Instr::ADC_r8_ir16(x0, x1) => write!(f, "ADC {:x?},({:x?})", x0, x1),
            Instr::ADC_r8_r8(x0, x1) => write!(f, "ADC {:x?},{:x?}", x0, x1),
            Instr::ADD_r16_r16(x0, x1) => write!(f, "ADD {:x?},{:x?}", x0, x1),
            Instr::ADD_r16_r8(x0, x1) => write!(f, "ADD {:x?},{:x?}", x0, x1),
            Instr::ADD_r8_d8(x0, x1) => write!(f, "ADD {:x?},{:x?}", x0, x1),
            Instr::ADD_r8_ir16(x0, x1) => write!(f, "ADD {:x?},({:x?})", x0, x1),
            Instr::ADD_r8_r8(x0, x1) => write!(f, "ADD {:x?},{:x?}", x0, x1),
            Instr::AND_d8(x0) => write!(f, "AND {:x?}", x0),
            Instr::AND_ir16(x0) => write!(f, "AND ({:x?})", x0),
            Instr::AND_r8(x0) => write!(f, "AND {:x?}", x0),
            Instr::CALL_COND_a16(x0, x1) => write!(f, "CALL {:x?},{:x?}", x0, x1),
            Instr::CALL_a16(x0) => write!(f, "CALL {:x?}", x0),
            Instr::CCF => write!(f, "CCF"),
            Instr::CPL => write!(f, "CPL"),
            Instr::CP_d8(x0) => write!(f, "CP {:x?}", x0),
            Instr::CP_ir16(x0) => write!(f, "CP ({:x?})", x0),
            Instr::CP_r8(x0) => write!(f, "CP {:x?}", x0),
            Instr::DAA => write!(f, "DAA"),
            Instr::DEC_ir16(x0) => write!(f, "DEC ({:x?})", x0),
            Instr::DEC_r16(x0) => write!(f, "DEC {:x?}", x0),
            Instr::DEC_r8(x0) => write!(f, "DEC {:x?}", x0),
            Instr::DI => write!(f, "DI"),
            Instr::EI => write!(f, "EI"),
            Instr::HALT => write!(f, "HALT"),
            Instr::INC_ir16(x0) => write!(f, "INC ({:x?})", x0),
            Instr::INC_r16(x0) => write!(f, "INC {:x?}", x0),
            Instr::INC_r8(x0) => write!(f, "INC {:x?}", x0),
            Instr::INVALID(x0) => write!(f, "INVALID 0x{:x}", x0),
            Instr::JP_COND_a16(x0, x1) => write!(f, "JP {:x?},{:x?}", x0, x1),
            Instr::JP_a16(x0) => write!(f, "JP {:x?}", x0),
            Instr::JP_r16(x0) => write!(f, "JP {:x?}", x0),
            Instr::JR_COND_r8(x0, x1) => write!(f, "JR {:x?},{:x?}", x0, x1),
            Instr::JR_r8(x0) => write!(f, "JR {:x?}", x0),
            Instr::LDH_ia8_r8(x0, x1) => write!(f, "LDH ({:x?}),{:x?}", x0, x1),
            Instr::LDH_r8_ia8(x0, x1) => write!(f, "LDH {:x?},({:x?})", x0, x1),
            Instr::LD_ia16_r16(x0, x1) => write!(f, "LD ({:x?}),{:x?}", x0, x1),
            Instr::LD_ia16_r8(x0, x1) => write!(f, "LD ({:x?}),{:x?}", x0, x1),
            Instr::LD_ir16_d8(x0, x1) => write!(f, "LD ({:x?}),{:x?}", x0, x1),
            Instr::LD_ir16_r8(x0, x1) => write!(f, "LD ({:x?}),{:x?}", x0, x1),
            Instr::LD_iir16_r8(x0, x1) => write!(f, "LD ({:x?}+),{:x?}", x0, x1),
            Instr::LD_dir16_r8(x0, x1) => write!(f, "LD ({:x?}-),{:x?}", x0, x1),
            Instr::LD_ir8_r8(x0, x1) => write!(f, "LD ({:x?}),{:x?}", x0, x1),
            Instr::LD_r16_d16(x0, x1) => write!(f, "LD {:x?},{:x?}", x0, x1),
            Instr::LD_r16_r16(x0, x1) => write!(f, "LD {:x?},{:x?}", x0, x1),
            Instr::LD_r16_r16_r8(x0, x1, x2) => write!(f, "LD {:x?},{:x?},{:x?}", x0, x1, x2),
            Instr::LD_r8_d8(x0, x1) => write!(f, "LD {:x?},{:x?}", x0, x1),
            Instr::LD_r8_ia16(x0, x1) => write!(f, "LD {:x?},({:x?})", x0, x1),
            Instr::LD_r8_ir16(x0, x1) => write!(f, "LD {:x?},({:x?})", x0, x1),
            Instr::LD_r8_iir16(x0, x1) => write!(f, "LD {:x?},({:x?}+)", x0, x1),
            Instr::LD_r8_dir16(x0, x1) => write!(f, "LD {:x?},({:x?}-)", x0, x1),
            Instr::LD_r8_ir8(x0, x1) => write!(f, "LD {:x?},({:x?})", x0, x1),
            Instr::LD_r8_r8(x0, x1) => write!(f, "LD {:x?},{:x?}", x0, x1),
            Instr::NOP => write!(f, "NOP"),
            Instr::OR_d8(x0) => write!(f, "OR {:x?}", x0),
            Instr::OR_ir16(x0) => write!(f, "OR ({:x?})", x0),
            Instr::OR_r8(x0) => write!(f, "OR {:x?}", x0),
            Instr::POP_r16(x0) => write!(f, "POP {:x?}", x0),
            Instr::PUSH_r16(x0) => write!(f, "PUSH {:x?}", x0),
            Instr::RET => write!(f, "RET"),
            Instr::RETI => write!(f, "RETI"),
            Instr::RET_COND(x0) => write!(f, "RET {:x?}", x0),
            Instr::RLA => write!(f, "RLA"),
            Instr::RLCA => write!(f, "RLCA"),
            Instr::RRA => write!(f, "RRA"),
            Instr::RRCA => write!(f, "RRCA"),
            Instr::RST_LIT(x0) => write!(f, "RST {:x?}", x0),
            Instr::SBC_r8_d8(x0, x1) => write!(f, "SBC {:x?},{:x?}", x0, x1),
            Instr::SBC_r8_ir16(x0, x1) => write!(f, "SBC {:x?},({:x?})", x0, x1),
            Instr::SBC_r8_r8(x0, x1) => write!(f, "SBC {:x?},{:x?}", x0, x1),
            Instr::SCF => write!(f, "SCF"),
            Instr::STOP_0(x0) => write!(f, "STOP {:x?}", x0),
            Instr::SUB_d8(x0) => write!(f, "SUB {:x?}", x0),
            Instr::SUB_ir16(x0) => write!(f, "SUB ({:x?})", x0),
            Instr::SUB_r8(x0) => write!(f, "SUB {:x?}", x0),
            Instr::XOR_d8(x0) => write!(f, "XOR {:x?}", x0),
            Instr::XOR_ir16(x0) => write!(f, "XOR ({:x?})", x0),
            Instr::XOR_r8(x0) => write!(f, "XOR {:x?}", x0),
            Instr::CBPrefix(prefix) => write!(f, "{}", prefix),
        }
    }
}

pub fn disasm<R: Addressable, W: Write, F: Fn(&Instr) -> bool>(
    mut start: u16,
    stop: u16,
    bytes: &mut R,
    buf: &mut W,
    filter: &F,
) -> std::io::Result<()> {
    while start < stop {
        let (next_addr, _code, op) = Instr::disasm(bytes, start);
        if filter(&op) {
            write!(buf, "0x{:04x}: ", start)?;
            for x in start..next_addr {
                write!(buf, "{:02x} ", bytes.read_byte(x))?;
            }
            for _ in next_addr.wrapping_sub(start)..3 {
                write!(buf, "   ")?;
            }
            writeln!(buf, "{}", op)?;
        }
        start = next_addr;
    }
    Ok(())
}
